// Code generated by mockery v2.23.0. DO NOT EDIT.

package mock_consumer

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Consumer is an autogenerated mock type for the Consumer type
type Consumer[Data interface{}] struct {
	mock.Mock
}

// Handle provides a mock function with given fields: ctx, data
func (_m *Consumer[Data]) Handle(ctx context.Context, data Data) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Data) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParseData provides a mock function with given fields: data
func (_m *Consumer[Data]) ParseData(data []byte) (Data, error) {
	ret := _m.Called(data)

	var r0 Data
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (Data, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) Data); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(Data)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewConsumer interface {
	mock.TestingT
	Cleanup(func())
}

// NewConsumer creates a new instance of Consumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConsumer[Data interface{}](t mockConstructorTestingTNewConsumer) *Consumer[Data] {
	mock := &Consumer[Data]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
