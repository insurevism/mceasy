// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"hokusai/ent/employee"
	"hokusai/ent/salarycalculation"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SalaryCalculation is the model entity for the SalaryCalculation schema.
type SalaryCalculation struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ModifiedAt holds the value of the "modified_at" field.
	ModifiedAt time.Time `json:"modified_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Foreign key to employees table
	EmployeeID uint64 `json:"employee_id,omitempty"`
	// First day of the month for calculation (YYYY-MM-01)
	CalculationMonth time.Time `json:"calculation_month,omitempty"`
	// Base salary for the month
	BaseSalary float64 `json:"base_salary,omitempty"`
	// Total working days in the month (excluding weekends)
	TotalWorkingDays int `json:"total_working_days,omitempty"`
	// Number of absent working days
	AbsentDays int `json:"absent_days,omitempty"`
	// Number of present working days
	PresentDays int `json:"present_days,omitempty"`
	// Final calculated salary after deductions
	FinalSalary float64 `json:"final_salary,omitempty"`
	// Total deduction amount
	DeductionAmount float64 `json:"deduction_amount,omitempty"`
	// Formula used for calculation (for audit purposes)
	CalculationFormula string `json:"calculation_formula,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SalaryCalculationQuery when eager-loading is set.
	Edges        SalaryCalculationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SalaryCalculationEdges holds the relations/edges for other nodes in the graph.
type SalaryCalculationEdges struct {
	// Employee holds the value of the employee edge.
	Employee *Employee `json:"employee,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SalaryCalculationEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[0] {
		if e.Employee == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SalaryCalculation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case salarycalculation.FieldBaseSalary, salarycalculation.FieldFinalSalary, salarycalculation.FieldDeductionAmount:
			values[i] = new(sql.NullFloat64)
		case salarycalculation.FieldID, salarycalculation.FieldEmployeeID, salarycalculation.FieldTotalWorkingDays, salarycalculation.FieldAbsentDays, salarycalculation.FieldPresentDays:
			values[i] = new(sql.NullInt64)
		case salarycalculation.FieldCalculationFormula:
			values[i] = new(sql.NullString)
		case salarycalculation.FieldCreatedAt, salarycalculation.FieldModifiedAt, salarycalculation.FieldDeletedAt, salarycalculation.FieldCalculationMonth:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SalaryCalculation fields.
func (sc *SalaryCalculation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case salarycalculation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sc.ID = uint64(value.Int64)
		case salarycalculation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sc.CreatedAt = value.Time
			}
		case salarycalculation.FieldModifiedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modified_at", values[i])
			} else if value.Valid {
				sc.ModifiedAt = value.Time
			}
		case salarycalculation.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sc.DeletedAt = value.Time
			}
		case salarycalculation.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employee_id", values[i])
			} else if value.Valid {
				sc.EmployeeID = uint64(value.Int64)
			}
		case salarycalculation.FieldCalculationMonth:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field calculation_month", values[i])
			} else if value.Valid {
				sc.CalculationMonth = value.Time
			}
		case salarycalculation.FieldBaseSalary:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field base_salary", values[i])
			} else if value.Valid {
				sc.BaseSalary = value.Float64
			}
		case salarycalculation.FieldTotalWorkingDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_working_days", values[i])
			} else if value.Valid {
				sc.TotalWorkingDays = int(value.Int64)
			}
		case salarycalculation.FieldAbsentDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field absent_days", values[i])
			} else if value.Valid {
				sc.AbsentDays = int(value.Int64)
			}
		case salarycalculation.FieldPresentDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field present_days", values[i])
			} else if value.Valid {
				sc.PresentDays = int(value.Int64)
			}
		case salarycalculation.FieldFinalSalary:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field final_salary", values[i])
			} else if value.Valid {
				sc.FinalSalary = value.Float64
			}
		case salarycalculation.FieldDeductionAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field deduction_amount", values[i])
			} else if value.Valid {
				sc.DeductionAmount = value.Float64
			}
		case salarycalculation.FieldCalculationFormula:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field calculation_formula", values[i])
			} else if value.Valid {
				sc.CalculationFormula = value.String
			}
		default:
			sc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SalaryCalculation.
// This includes values selected through modifiers, order, etc.
func (sc *SalaryCalculation) Value(name string) (ent.Value, error) {
	return sc.selectValues.Get(name)
}

// QueryEmployee queries the "employee" edge of the SalaryCalculation entity.
func (sc *SalaryCalculation) QueryEmployee() *EmployeeQuery {
	return NewSalaryCalculationClient(sc.config).QueryEmployee(sc)
}

// Update returns a builder for updating this SalaryCalculation.
// Note that you need to call SalaryCalculation.Unwrap() before calling this method if this SalaryCalculation
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *SalaryCalculation) Update() *SalaryCalculationUpdateOne {
	return NewSalaryCalculationClient(sc.config).UpdateOne(sc)
}

// Unwrap unwraps the SalaryCalculation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *SalaryCalculation) Unwrap() *SalaryCalculation {
	_tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: SalaryCalculation is not a transactional entity")
	}
	sc.config.driver = _tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *SalaryCalculation) String() string {
	var builder strings.Builder
	builder.WriteString("SalaryCalculation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("modified_at=")
	builder.WriteString(sc.ModifiedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(sc.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("employee_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.EmployeeID))
	builder.WriteString(", ")
	builder.WriteString("calculation_month=")
	builder.WriteString(sc.CalculationMonth.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("base_salary=")
	builder.WriteString(fmt.Sprintf("%v", sc.BaseSalary))
	builder.WriteString(", ")
	builder.WriteString("total_working_days=")
	builder.WriteString(fmt.Sprintf("%v", sc.TotalWorkingDays))
	builder.WriteString(", ")
	builder.WriteString("absent_days=")
	builder.WriteString(fmt.Sprintf("%v", sc.AbsentDays))
	builder.WriteString(", ")
	builder.WriteString("present_days=")
	builder.WriteString(fmt.Sprintf("%v", sc.PresentDays))
	builder.WriteString(", ")
	builder.WriteString("final_salary=")
	builder.WriteString(fmt.Sprintf("%v", sc.FinalSalary))
	builder.WriteString(", ")
	builder.WriteString("deduction_amount=")
	builder.WriteString(fmt.Sprintf("%v", sc.DeductionAmount))
	builder.WriteString(", ")
	builder.WriteString("calculation_formula=")
	builder.WriteString(sc.CalculationFormula)
	builder.WriteByte(')')
	return builder.String()
}

// SalaryCalculations is a parsable slice of SalaryCalculation.
type SalaryCalculations []*SalaryCalculation
