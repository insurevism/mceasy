// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mceasy/ent/attendance"
	"mceasy/ent/employee"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttendanceCreate is the builder for creating a Attendance entity.
type AttendanceCreate struct {
	config
	mutation *AttendanceMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ac *AttendanceCreate) SetCreatedAt(t time.Time) *AttendanceCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AttendanceCreate) SetNillableCreatedAt(t *time.Time) *AttendanceCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetModifiedAt sets the "modified_at" field.
func (ac *AttendanceCreate) SetModifiedAt(t time.Time) *AttendanceCreate {
	ac.mutation.SetModifiedAt(t)
	return ac
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (ac *AttendanceCreate) SetNillableModifiedAt(t *time.Time) *AttendanceCreate {
	if t != nil {
		ac.SetModifiedAt(*t)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AttendanceCreate) SetDeletedAt(t time.Time) *AttendanceCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AttendanceCreate) SetNillableDeletedAt(t *time.Time) *AttendanceCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetEmployeeID sets the "employee_id" field.
func (ac *AttendanceCreate) SetEmployeeID(u uint64) *AttendanceCreate {
	ac.mutation.SetEmployeeID(u)
	return ac
}

// SetAttendanceDate sets the "attendance_date" field.
func (ac *AttendanceCreate) SetAttendanceDate(t time.Time) *AttendanceCreate {
	ac.mutation.SetAttendanceDate(t)
	return ac
}

// SetCheckInTime sets the "check_in_time" field.
func (ac *AttendanceCreate) SetCheckInTime(t time.Time) *AttendanceCreate {
	ac.mutation.SetCheckInTime(t)
	return ac
}

// SetNillableCheckInTime sets the "check_in_time" field if the given value is not nil.
func (ac *AttendanceCreate) SetNillableCheckInTime(t *time.Time) *AttendanceCreate {
	if t != nil {
		ac.SetCheckInTime(*t)
	}
	return ac
}

// SetCheckOutTime sets the "check_out_time" field.
func (ac *AttendanceCreate) SetCheckOutTime(t time.Time) *AttendanceCreate {
	ac.mutation.SetCheckOutTime(t)
	return ac
}

// SetNillableCheckOutTime sets the "check_out_time" field if the given value is not nil.
func (ac *AttendanceCreate) SetNillableCheckOutTime(t *time.Time) *AttendanceCreate {
	if t != nil {
		ac.SetCheckOutTime(*t)
	}
	return ac
}

// SetStatus sets the "status" field.
func (ac *AttendanceCreate) SetStatus(a attendance.Status) *AttendanceCreate {
	ac.mutation.SetStatus(a)
	return ac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ac *AttendanceCreate) SetNillableStatus(a *attendance.Status) *AttendanceCreate {
	if a != nil {
		ac.SetStatus(*a)
	}
	return ac
}

// SetIsWeekend sets the "is_weekend" field.
func (ac *AttendanceCreate) SetIsWeekend(b bool) *AttendanceCreate {
	ac.mutation.SetIsWeekend(b)
	return ac
}

// SetNillableIsWeekend sets the "is_weekend" field if the given value is not nil.
func (ac *AttendanceCreate) SetNillableIsWeekend(b *bool) *AttendanceCreate {
	if b != nil {
		ac.SetIsWeekend(*b)
	}
	return ac
}

// SetNotes sets the "notes" field.
func (ac *AttendanceCreate) SetNotes(s string) *AttendanceCreate {
	ac.mutation.SetNotes(s)
	return ac
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (ac *AttendanceCreate) SetNillableNotes(s *string) *AttendanceCreate {
	if s != nil {
		ac.SetNotes(*s)
	}
	return ac
}

// SetMarkedByAdmin sets the "marked_by_admin" field.
func (ac *AttendanceCreate) SetMarkedByAdmin(b bool) *AttendanceCreate {
	ac.mutation.SetMarkedByAdmin(b)
	return ac
}

// SetNillableMarkedByAdmin sets the "marked_by_admin" field if the given value is not nil.
func (ac *AttendanceCreate) SetNillableMarkedByAdmin(b *bool) *AttendanceCreate {
	if b != nil {
		ac.SetMarkedByAdmin(*b)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AttendanceCreate) SetID(u uint64) *AttendanceCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (ac *AttendanceCreate) SetEmployee(e *Employee) *AttendanceCreate {
	return ac.SetEmployeeID(e.ID)
}

// Mutation returns the AttendanceMutation object of the builder.
func (ac *AttendanceCreate) Mutation() *AttendanceMutation {
	return ac.mutation
}

// Save creates the Attendance in the database.
func (ac *AttendanceCreate) Save(ctx context.Context) (*Attendance, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AttendanceCreate) SaveX(ctx context.Context) *Attendance {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AttendanceCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AttendanceCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AttendanceCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := attendance.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.ModifiedAt(); !ok {
		v := attendance.DefaultModifiedAt()
		ac.mutation.SetModifiedAt(v)
	}
	if _, ok := ac.mutation.Status(); !ok {
		v := attendance.DefaultStatus
		ac.mutation.SetStatus(v)
	}
	if _, ok := ac.mutation.IsWeekend(); !ok {
		v := attendance.DefaultIsWeekend
		ac.mutation.SetIsWeekend(v)
	}
	if _, ok := ac.mutation.MarkedByAdmin(); !ok {
		v := attendance.DefaultMarkedByAdmin
		ac.mutation.SetMarkedByAdmin(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AttendanceCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Attendance.created_at"`)}
	}
	if _, ok := ac.mutation.ModifiedAt(); !ok {
		return &ValidationError{Name: "modified_at", err: errors.New(`ent: missing required field "Attendance.modified_at"`)}
	}
	if _, ok := ac.mutation.EmployeeID(); !ok {
		return &ValidationError{Name: "employee_id", err: errors.New(`ent: missing required field "Attendance.employee_id"`)}
	}
	if _, ok := ac.mutation.AttendanceDate(); !ok {
		return &ValidationError{Name: "attendance_date", err: errors.New(`ent: missing required field "Attendance.attendance_date"`)}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Attendance.status"`)}
	}
	if v, ok := ac.mutation.Status(); ok {
		if err := attendance.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Attendance.status": %w`, err)}
		}
	}
	if _, ok := ac.mutation.IsWeekend(); !ok {
		return &ValidationError{Name: "is_weekend", err: errors.New(`ent: missing required field "Attendance.is_weekend"`)}
	}
	if _, ok := ac.mutation.MarkedByAdmin(); !ok {
		return &ValidationError{Name: "marked_by_admin", err: errors.New(`ent: missing required field "Attendance.marked_by_admin"`)}
	}
	if _, ok := ac.mutation.EmployeeID(); !ok {
		return &ValidationError{Name: "employee", err: errors.New(`ent: missing required edge "Attendance.employee"`)}
	}
	return nil
}

func (ac *AttendanceCreate) sqlSave(ctx context.Context) (*Attendance, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AttendanceCreate) createSpec() (*Attendance, *sqlgraph.CreateSpec) {
	var (
		_node = &Attendance{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(attendance.Table, sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUint64))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(attendance.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.ModifiedAt(); ok {
		_spec.SetField(attendance.FieldModifiedAt, field.TypeTime, value)
		_node.ModifiedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(attendance.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ac.mutation.AttendanceDate(); ok {
		_spec.SetField(attendance.FieldAttendanceDate, field.TypeTime, value)
		_node.AttendanceDate = value
	}
	if value, ok := ac.mutation.CheckInTime(); ok {
		_spec.SetField(attendance.FieldCheckInTime, field.TypeTime, value)
		_node.CheckInTime = value
	}
	if value, ok := ac.mutation.CheckOutTime(); ok {
		_spec.SetField(attendance.FieldCheckOutTime, field.TypeTime, value)
		_node.CheckOutTime = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.SetField(attendance.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ac.mutation.IsWeekend(); ok {
		_spec.SetField(attendance.FieldIsWeekend, field.TypeBool, value)
		_node.IsWeekend = value
	}
	if value, ok := ac.mutation.Notes(); ok {
		_spec.SetField(attendance.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := ac.mutation.MarkedByAdmin(); ok {
		_spec.SetField(attendance.FieldMarkedByAdmin, field.TypeBool, value)
		_node.MarkedByAdmin = value
	}
	if nodes := ac.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.EmployeeTable,
			Columns: []string{attendance.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmployeeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AttendanceCreateBulk is the builder for creating many Attendance entities in bulk.
type AttendanceCreateBulk struct {
	config
	builders []*AttendanceCreate
}

// Save creates the Attendance entities in the database.
func (acb *AttendanceCreateBulk) Save(ctx context.Context) ([]*Attendance, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Attendance, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttendanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AttendanceCreateBulk) SaveX(ctx context.Context) []*Attendance {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AttendanceCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AttendanceCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
