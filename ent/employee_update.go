// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mceasy/ent/attendance"
	"mceasy/ent/employee"
	"mceasy/ent/predicate"
	"mceasy/ent/salarycalculation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeeUpdate is the builder for updating Employee entities.
type EmployeeUpdate struct {
	config
	hooks     []Hook
	mutation  *EmployeeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EmployeeUpdate builder.
func (eu *EmployeeUpdate) Where(ps ...predicate.Employee) *EmployeeUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetModifiedAt sets the "modified_at" field.
func (eu *EmployeeUpdate) SetModifiedAt(t time.Time) *EmployeeUpdate {
	eu.mutation.SetModifiedAt(t)
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *EmployeeUpdate) SetDeletedAt(t time.Time) *EmployeeUpdate {
	eu.mutation.SetDeletedAt(t)
	return eu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableDeletedAt(t *time.Time) *EmployeeUpdate {
	if t != nil {
		eu.SetDeletedAt(*t)
	}
	return eu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eu *EmployeeUpdate) ClearDeletedAt() *EmployeeUpdate {
	eu.mutation.ClearDeletedAt()
	return eu
}

// SetEmployeeID sets the "employee_id" field.
func (eu *EmployeeUpdate) SetEmployeeID(s string) *EmployeeUpdate {
	eu.mutation.SetEmployeeID(s)
	return eu
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableEmployeeID(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetEmployeeID(*s)
	}
	return eu
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (eu *EmployeeUpdate) ClearEmployeeID() *EmployeeUpdate {
	eu.mutation.ClearEmployeeID()
	return eu
}

// SetFullName sets the "full_name" field.
func (eu *EmployeeUpdate) SetFullName(s string) *EmployeeUpdate {
	eu.mutation.SetFullName(s)
	return eu
}

// SetEmail sets the "email" field.
func (eu *EmployeeUpdate) SetEmail(s string) *EmployeeUpdate {
	eu.mutation.SetEmail(s)
	return eu
}

// SetPhone sets the "phone" field.
func (eu *EmployeeUpdate) SetPhone(s string) *EmployeeUpdate {
	eu.mutation.SetPhone(s)
	return eu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillablePhone(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetPhone(*s)
	}
	return eu
}

// ClearPhone clears the value of the "phone" field.
func (eu *EmployeeUpdate) ClearPhone() *EmployeeUpdate {
	eu.mutation.ClearPhone()
	return eu
}

// SetPosition sets the "position" field.
func (eu *EmployeeUpdate) SetPosition(s string) *EmployeeUpdate {
	eu.mutation.SetPosition(s)
	return eu
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillablePosition(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetPosition(*s)
	}
	return eu
}

// ClearPosition clears the value of the "position" field.
func (eu *EmployeeUpdate) ClearPosition() *EmployeeUpdate {
	eu.mutation.ClearPosition()
	return eu
}

// SetDepartment sets the "department" field.
func (eu *EmployeeUpdate) SetDepartment(s string) *EmployeeUpdate {
	eu.mutation.SetDepartment(s)
	return eu
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableDepartment(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetDepartment(*s)
	}
	return eu
}

// ClearDepartment clears the value of the "department" field.
func (eu *EmployeeUpdate) ClearDepartment() *EmployeeUpdate {
	eu.mutation.ClearDepartment()
	return eu
}

// SetHireDate sets the "hire_date" field.
func (eu *EmployeeUpdate) SetHireDate(t time.Time) *EmployeeUpdate {
	eu.mutation.SetHireDate(t)
	return eu
}

// SetBaseSalary sets the "base_salary" field.
func (eu *EmployeeUpdate) SetBaseSalary(f float64) *EmployeeUpdate {
	eu.mutation.ResetBaseSalary()
	eu.mutation.SetBaseSalary(f)
	return eu
}

// SetNillableBaseSalary sets the "base_salary" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableBaseSalary(f *float64) *EmployeeUpdate {
	if f != nil {
		eu.SetBaseSalary(*f)
	}
	return eu
}

// AddBaseSalary adds f to the "base_salary" field.
func (eu *EmployeeUpdate) AddBaseSalary(f float64) *EmployeeUpdate {
	eu.mutation.AddBaseSalary(f)
	return eu
}

// SetIsActive sets the "is_active" field.
func (eu *EmployeeUpdate) SetIsActive(b bool) *EmployeeUpdate {
	eu.mutation.SetIsActive(b)
	return eu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableIsActive(b *bool) *EmployeeUpdate {
	if b != nil {
		eu.SetIsActive(*b)
	}
	return eu
}

// AddAttendanceIDs adds the "attendances" edge to the Attendance entity by IDs.
func (eu *EmployeeUpdate) AddAttendanceIDs(ids ...uint64) *EmployeeUpdate {
	eu.mutation.AddAttendanceIDs(ids...)
	return eu
}

// AddAttendances adds the "attendances" edges to the Attendance entity.
func (eu *EmployeeUpdate) AddAttendances(a ...*Attendance) *EmployeeUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.AddAttendanceIDs(ids...)
}

// AddSalaryCalculationIDs adds the "salary_calculations" edge to the SalaryCalculation entity by IDs.
func (eu *EmployeeUpdate) AddSalaryCalculationIDs(ids ...uint64) *EmployeeUpdate {
	eu.mutation.AddSalaryCalculationIDs(ids...)
	return eu
}

// AddSalaryCalculations adds the "salary_calculations" edges to the SalaryCalculation entity.
func (eu *EmployeeUpdate) AddSalaryCalculations(s ...*SalaryCalculation) *EmployeeUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.AddSalaryCalculationIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (eu *EmployeeUpdate) Mutation() *EmployeeMutation {
	return eu.mutation
}

// ClearAttendances clears all "attendances" edges to the Attendance entity.
func (eu *EmployeeUpdate) ClearAttendances() *EmployeeUpdate {
	eu.mutation.ClearAttendances()
	return eu
}

// RemoveAttendanceIDs removes the "attendances" edge to Attendance entities by IDs.
func (eu *EmployeeUpdate) RemoveAttendanceIDs(ids ...uint64) *EmployeeUpdate {
	eu.mutation.RemoveAttendanceIDs(ids...)
	return eu
}

// RemoveAttendances removes "attendances" edges to Attendance entities.
func (eu *EmployeeUpdate) RemoveAttendances(a ...*Attendance) *EmployeeUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.RemoveAttendanceIDs(ids...)
}

// ClearSalaryCalculations clears all "salary_calculations" edges to the SalaryCalculation entity.
func (eu *EmployeeUpdate) ClearSalaryCalculations() *EmployeeUpdate {
	eu.mutation.ClearSalaryCalculations()
	return eu
}

// RemoveSalaryCalculationIDs removes the "salary_calculations" edge to SalaryCalculation entities by IDs.
func (eu *EmployeeUpdate) RemoveSalaryCalculationIDs(ids ...uint64) *EmployeeUpdate {
	eu.mutation.RemoveSalaryCalculationIDs(ids...)
	return eu
}

// RemoveSalaryCalculations removes "salary_calculations" edges to SalaryCalculation entities.
func (eu *EmployeeUpdate) RemoveSalaryCalculations(s ...*SalaryCalculation) *EmployeeUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.RemoveSalaryCalculationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EmployeeUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmployeeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmployeeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmployeeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EmployeeUpdate) defaults() {
	if _, ok := eu.mutation.ModifiedAt(); !ok {
		v := employee.UpdateDefaultModifiedAt()
		eu.mutation.SetModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EmployeeUpdate) check() error {
	if v, ok := eu.mutation.EmployeeID(); ok {
		if err := employee.EmployeeIDValidator(v); err != nil {
			return &ValidationError{Name: "employee_id", err: fmt.Errorf(`ent: validator failed for field "Employee.employee_id": %w`, err)}
		}
	}
	if v, ok := eu.mutation.FullName(); ok {
		if err := employee.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "Employee.full_name": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Email(); ok {
		if err := employee.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Employee.email": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Phone(); ok {
		if err := employee.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Employee.phone": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Position(); ok {
		if err := employee.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "Employee.position": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Department(); ok {
		if err := employee.DepartmentValidator(v); err != nil {
			return &ValidationError{Name: "department", err: fmt.Errorf(`ent: validator failed for field "Employee.department": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eu *EmployeeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EmployeeUpdate {
	eu.modifiers = append(eu.modifiers, modifiers...)
	return eu
}

func (eu *EmployeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(employee.Table, employee.Columns, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.ModifiedAt(); ok {
		_spec.SetField(employee.FieldModifiedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.SetField(employee.FieldDeletedAt, field.TypeTime, value)
	}
	if eu.mutation.DeletedAtCleared() {
		_spec.ClearField(employee.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.EmployeeID(); ok {
		_spec.SetField(employee.FieldEmployeeID, field.TypeString, value)
	}
	if eu.mutation.EmployeeIDCleared() {
		_spec.ClearField(employee.FieldEmployeeID, field.TypeString)
	}
	if value, ok := eu.mutation.FullName(); ok {
		_spec.SetField(employee.FieldFullName, field.TypeString, value)
	}
	if value, ok := eu.mutation.Email(); ok {
		_spec.SetField(employee.FieldEmail, field.TypeString, value)
	}
	if value, ok := eu.mutation.Phone(); ok {
		_spec.SetField(employee.FieldPhone, field.TypeString, value)
	}
	if eu.mutation.PhoneCleared() {
		_spec.ClearField(employee.FieldPhone, field.TypeString)
	}
	if value, ok := eu.mutation.Position(); ok {
		_spec.SetField(employee.FieldPosition, field.TypeString, value)
	}
	if eu.mutation.PositionCleared() {
		_spec.ClearField(employee.FieldPosition, field.TypeString)
	}
	if value, ok := eu.mutation.Department(); ok {
		_spec.SetField(employee.FieldDepartment, field.TypeString, value)
	}
	if eu.mutation.DepartmentCleared() {
		_spec.ClearField(employee.FieldDepartment, field.TypeString)
	}
	if value, ok := eu.mutation.HireDate(); ok {
		_spec.SetField(employee.FieldHireDate, field.TypeTime, value)
	}
	if value, ok := eu.mutation.BaseSalary(); ok {
		_spec.SetField(employee.FieldBaseSalary, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.AddedBaseSalary(); ok {
		_spec.AddField(employee.FieldBaseSalary, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.IsActive(); ok {
		_spec.SetField(employee.FieldIsActive, field.TypeBool, value)
	}
	if eu.mutation.AttendancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AttendancesTable,
			Columns: []string{employee.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedAttendancesIDs(); len(nodes) > 0 && !eu.mutation.AttendancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AttendancesTable,
			Columns: []string{employee.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.AttendancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AttendancesTable,
			Columns: []string{employee.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.SalaryCalculationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.SalaryCalculationsTable,
			Columns: []string{employee.SalaryCalculationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salarycalculation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedSalaryCalculationsIDs(); len(nodes) > 0 && !eu.mutation.SalaryCalculationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.SalaryCalculationsTable,
			Columns: []string{employee.SalaryCalculationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salarycalculation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SalaryCalculationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.SalaryCalculationsTable,
			Columns: []string{employee.SalaryCalculationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salarycalculation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(eu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EmployeeUpdateOne is the builder for updating a single Employee entity.
type EmployeeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EmployeeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetModifiedAt sets the "modified_at" field.
func (euo *EmployeeUpdateOne) SetModifiedAt(t time.Time) *EmployeeUpdateOne {
	euo.mutation.SetModifiedAt(t)
	return euo
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *EmployeeUpdateOne) SetDeletedAt(t time.Time) *EmployeeUpdateOne {
	euo.mutation.SetDeletedAt(t)
	return euo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableDeletedAt(t *time.Time) *EmployeeUpdateOne {
	if t != nil {
		euo.SetDeletedAt(*t)
	}
	return euo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (euo *EmployeeUpdateOne) ClearDeletedAt() *EmployeeUpdateOne {
	euo.mutation.ClearDeletedAt()
	return euo
}

// SetEmployeeID sets the "employee_id" field.
func (euo *EmployeeUpdateOne) SetEmployeeID(s string) *EmployeeUpdateOne {
	euo.mutation.SetEmployeeID(s)
	return euo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableEmployeeID(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetEmployeeID(*s)
	}
	return euo
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (euo *EmployeeUpdateOne) ClearEmployeeID() *EmployeeUpdateOne {
	euo.mutation.ClearEmployeeID()
	return euo
}

// SetFullName sets the "full_name" field.
func (euo *EmployeeUpdateOne) SetFullName(s string) *EmployeeUpdateOne {
	euo.mutation.SetFullName(s)
	return euo
}

// SetEmail sets the "email" field.
func (euo *EmployeeUpdateOne) SetEmail(s string) *EmployeeUpdateOne {
	euo.mutation.SetEmail(s)
	return euo
}

// SetPhone sets the "phone" field.
func (euo *EmployeeUpdateOne) SetPhone(s string) *EmployeeUpdateOne {
	euo.mutation.SetPhone(s)
	return euo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillablePhone(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetPhone(*s)
	}
	return euo
}

// ClearPhone clears the value of the "phone" field.
func (euo *EmployeeUpdateOne) ClearPhone() *EmployeeUpdateOne {
	euo.mutation.ClearPhone()
	return euo
}

// SetPosition sets the "position" field.
func (euo *EmployeeUpdateOne) SetPosition(s string) *EmployeeUpdateOne {
	euo.mutation.SetPosition(s)
	return euo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillablePosition(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetPosition(*s)
	}
	return euo
}

// ClearPosition clears the value of the "position" field.
func (euo *EmployeeUpdateOne) ClearPosition() *EmployeeUpdateOne {
	euo.mutation.ClearPosition()
	return euo
}

// SetDepartment sets the "department" field.
func (euo *EmployeeUpdateOne) SetDepartment(s string) *EmployeeUpdateOne {
	euo.mutation.SetDepartment(s)
	return euo
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableDepartment(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetDepartment(*s)
	}
	return euo
}

// ClearDepartment clears the value of the "department" field.
func (euo *EmployeeUpdateOne) ClearDepartment() *EmployeeUpdateOne {
	euo.mutation.ClearDepartment()
	return euo
}

// SetHireDate sets the "hire_date" field.
func (euo *EmployeeUpdateOne) SetHireDate(t time.Time) *EmployeeUpdateOne {
	euo.mutation.SetHireDate(t)
	return euo
}

// SetBaseSalary sets the "base_salary" field.
func (euo *EmployeeUpdateOne) SetBaseSalary(f float64) *EmployeeUpdateOne {
	euo.mutation.ResetBaseSalary()
	euo.mutation.SetBaseSalary(f)
	return euo
}

// SetNillableBaseSalary sets the "base_salary" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableBaseSalary(f *float64) *EmployeeUpdateOne {
	if f != nil {
		euo.SetBaseSalary(*f)
	}
	return euo
}

// AddBaseSalary adds f to the "base_salary" field.
func (euo *EmployeeUpdateOne) AddBaseSalary(f float64) *EmployeeUpdateOne {
	euo.mutation.AddBaseSalary(f)
	return euo
}

// SetIsActive sets the "is_active" field.
func (euo *EmployeeUpdateOne) SetIsActive(b bool) *EmployeeUpdateOne {
	euo.mutation.SetIsActive(b)
	return euo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableIsActive(b *bool) *EmployeeUpdateOne {
	if b != nil {
		euo.SetIsActive(*b)
	}
	return euo
}

// AddAttendanceIDs adds the "attendances" edge to the Attendance entity by IDs.
func (euo *EmployeeUpdateOne) AddAttendanceIDs(ids ...uint64) *EmployeeUpdateOne {
	euo.mutation.AddAttendanceIDs(ids...)
	return euo
}

// AddAttendances adds the "attendances" edges to the Attendance entity.
func (euo *EmployeeUpdateOne) AddAttendances(a ...*Attendance) *EmployeeUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.AddAttendanceIDs(ids...)
}

// AddSalaryCalculationIDs adds the "salary_calculations" edge to the SalaryCalculation entity by IDs.
func (euo *EmployeeUpdateOne) AddSalaryCalculationIDs(ids ...uint64) *EmployeeUpdateOne {
	euo.mutation.AddSalaryCalculationIDs(ids...)
	return euo
}

// AddSalaryCalculations adds the "salary_calculations" edges to the SalaryCalculation entity.
func (euo *EmployeeUpdateOne) AddSalaryCalculations(s ...*SalaryCalculation) *EmployeeUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.AddSalaryCalculationIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (euo *EmployeeUpdateOne) Mutation() *EmployeeMutation {
	return euo.mutation
}

// ClearAttendances clears all "attendances" edges to the Attendance entity.
func (euo *EmployeeUpdateOne) ClearAttendances() *EmployeeUpdateOne {
	euo.mutation.ClearAttendances()
	return euo
}

// RemoveAttendanceIDs removes the "attendances" edge to Attendance entities by IDs.
func (euo *EmployeeUpdateOne) RemoveAttendanceIDs(ids ...uint64) *EmployeeUpdateOne {
	euo.mutation.RemoveAttendanceIDs(ids...)
	return euo
}

// RemoveAttendances removes "attendances" edges to Attendance entities.
func (euo *EmployeeUpdateOne) RemoveAttendances(a ...*Attendance) *EmployeeUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.RemoveAttendanceIDs(ids...)
}

// ClearSalaryCalculations clears all "salary_calculations" edges to the SalaryCalculation entity.
func (euo *EmployeeUpdateOne) ClearSalaryCalculations() *EmployeeUpdateOne {
	euo.mutation.ClearSalaryCalculations()
	return euo
}

// RemoveSalaryCalculationIDs removes the "salary_calculations" edge to SalaryCalculation entities by IDs.
func (euo *EmployeeUpdateOne) RemoveSalaryCalculationIDs(ids ...uint64) *EmployeeUpdateOne {
	euo.mutation.RemoveSalaryCalculationIDs(ids...)
	return euo
}

// RemoveSalaryCalculations removes "salary_calculations" edges to SalaryCalculation entities.
func (euo *EmployeeUpdateOne) RemoveSalaryCalculations(s ...*SalaryCalculation) *EmployeeUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.RemoveSalaryCalculationIDs(ids...)
}

// Where appends a list predicates to the EmployeeUpdate builder.
func (euo *EmployeeUpdateOne) Where(ps ...predicate.Employee) *EmployeeUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EmployeeUpdateOne) Select(field string, fields ...string) *EmployeeUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Employee entity.
func (euo *EmployeeUpdateOne) Save(ctx context.Context) (*Employee, error) {
	euo.defaults()
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmployeeUpdateOne) SaveX(ctx context.Context) *Employee {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EmployeeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmployeeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EmployeeUpdateOne) defaults() {
	if _, ok := euo.mutation.ModifiedAt(); !ok {
		v := employee.UpdateDefaultModifiedAt()
		euo.mutation.SetModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EmployeeUpdateOne) check() error {
	if v, ok := euo.mutation.EmployeeID(); ok {
		if err := employee.EmployeeIDValidator(v); err != nil {
			return &ValidationError{Name: "employee_id", err: fmt.Errorf(`ent: validator failed for field "Employee.employee_id": %w`, err)}
		}
	}
	if v, ok := euo.mutation.FullName(); ok {
		if err := employee.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "Employee.full_name": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Email(); ok {
		if err := employee.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Employee.email": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Phone(); ok {
		if err := employee.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Employee.phone": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Position(); ok {
		if err := employee.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "Employee.position": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Department(); ok {
		if err := employee.DepartmentValidator(v); err != nil {
			return &ValidationError{Name: "department", err: fmt.Errorf(`ent: validator failed for field "Employee.department": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (euo *EmployeeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EmployeeUpdateOne {
	euo.modifiers = append(euo.modifiers, modifiers...)
	return euo
}

func (euo *EmployeeUpdateOne) sqlSave(ctx context.Context) (_node *Employee, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(employee.Table, employee.Columns, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Employee.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employee.FieldID)
		for _, f := range fields {
			if !employee.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.ModifiedAt(); ok {
		_spec.SetField(employee.FieldModifiedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.SetField(employee.FieldDeletedAt, field.TypeTime, value)
	}
	if euo.mutation.DeletedAtCleared() {
		_spec.ClearField(employee.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.EmployeeID(); ok {
		_spec.SetField(employee.FieldEmployeeID, field.TypeString, value)
	}
	if euo.mutation.EmployeeIDCleared() {
		_spec.ClearField(employee.FieldEmployeeID, field.TypeString)
	}
	if value, ok := euo.mutation.FullName(); ok {
		_spec.SetField(employee.FieldFullName, field.TypeString, value)
	}
	if value, ok := euo.mutation.Email(); ok {
		_spec.SetField(employee.FieldEmail, field.TypeString, value)
	}
	if value, ok := euo.mutation.Phone(); ok {
		_spec.SetField(employee.FieldPhone, field.TypeString, value)
	}
	if euo.mutation.PhoneCleared() {
		_spec.ClearField(employee.FieldPhone, field.TypeString)
	}
	if value, ok := euo.mutation.Position(); ok {
		_spec.SetField(employee.FieldPosition, field.TypeString, value)
	}
	if euo.mutation.PositionCleared() {
		_spec.ClearField(employee.FieldPosition, field.TypeString)
	}
	if value, ok := euo.mutation.Department(); ok {
		_spec.SetField(employee.FieldDepartment, field.TypeString, value)
	}
	if euo.mutation.DepartmentCleared() {
		_spec.ClearField(employee.FieldDepartment, field.TypeString)
	}
	if value, ok := euo.mutation.HireDate(); ok {
		_spec.SetField(employee.FieldHireDate, field.TypeTime, value)
	}
	if value, ok := euo.mutation.BaseSalary(); ok {
		_spec.SetField(employee.FieldBaseSalary, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.AddedBaseSalary(); ok {
		_spec.AddField(employee.FieldBaseSalary, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.IsActive(); ok {
		_spec.SetField(employee.FieldIsActive, field.TypeBool, value)
	}
	if euo.mutation.AttendancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AttendancesTable,
			Columns: []string{employee.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedAttendancesIDs(); len(nodes) > 0 && !euo.mutation.AttendancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AttendancesTable,
			Columns: []string{employee.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.AttendancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AttendancesTable,
			Columns: []string{employee.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.SalaryCalculationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.SalaryCalculationsTable,
			Columns: []string{employee.SalaryCalculationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salarycalculation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedSalaryCalculationsIDs(); len(nodes) > 0 && !euo.mutation.SalaryCalculationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.SalaryCalculationsTable,
			Columns: []string{employee.SalaryCalculationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salarycalculation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SalaryCalculationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.SalaryCalculationsTable,
			Columns: []string{employee.SalaryCalculationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salarycalculation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(euo.modifiers...)
	_node = &Employee{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
