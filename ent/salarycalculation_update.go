// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hokusai/ent/employee"
	"hokusai/ent/predicate"
	"hokusai/ent/salarycalculation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SalaryCalculationUpdate is the builder for updating SalaryCalculation entities.
type SalaryCalculationUpdate struct {
	config
	hooks     []Hook
	mutation  *SalaryCalculationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SalaryCalculationUpdate builder.
func (scu *SalaryCalculationUpdate) Where(ps ...predicate.SalaryCalculation) *SalaryCalculationUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetModifiedAt sets the "modified_at" field.
func (scu *SalaryCalculationUpdate) SetModifiedAt(t time.Time) *SalaryCalculationUpdate {
	scu.mutation.SetModifiedAt(t)
	return scu
}

// SetDeletedAt sets the "deleted_at" field.
func (scu *SalaryCalculationUpdate) SetDeletedAt(t time.Time) *SalaryCalculationUpdate {
	scu.mutation.SetDeletedAt(t)
	return scu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (scu *SalaryCalculationUpdate) SetNillableDeletedAt(t *time.Time) *SalaryCalculationUpdate {
	if t != nil {
		scu.SetDeletedAt(*t)
	}
	return scu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (scu *SalaryCalculationUpdate) ClearDeletedAt() *SalaryCalculationUpdate {
	scu.mutation.ClearDeletedAt()
	return scu
}

// SetEmployeeID sets the "employee_id" field.
func (scu *SalaryCalculationUpdate) SetEmployeeID(u uint64) *SalaryCalculationUpdate {
	scu.mutation.SetEmployeeID(u)
	return scu
}

// SetCalculationMonth sets the "calculation_month" field.
func (scu *SalaryCalculationUpdate) SetCalculationMonth(t time.Time) *SalaryCalculationUpdate {
	scu.mutation.SetCalculationMonth(t)
	return scu
}

// SetBaseSalary sets the "base_salary" field.
func (scu *SalaryCalculationUpdate) SetBaseSalary(f float64) *SalaryCalculationUpdate {
	scu.mutation.ResetBaseSalary()
	scu.mutation.SetBaseSalary(f)
	return scu
}

// AddBaseSalary adds f to the "base_salary" field.
func (scu *SalaryCalculationUpdate) AddBaseSalary(f float64) *SalaryCalculationUpdate {
	scu.mutation.AddBaseSalary(f)
	return scu
}

// SetTotalWorkingDays sets the "total_working_days" field.
func (scu *SalaryCalculationUpdate) SetTotalWorkingDays(i int) *SalaryCalculationUpdate {
	scu.mutation.ResetTotalWorkingDays()
	scu.mutation.SetTotalWorkingDays(i)
	return scu
}

// AddTotalWorkingDays adds i to the "total_working_days" field.
func (scu *SalaryCalculationUpdate) AddTotalWorkingDays(i int) *SalaryCalculationUpdate {
	scu.mutation.AddTotalWorkingDays(i)
	return scu
}

// SetAbsentDays sets the "absent_days" field.
func (scu *SalaryCalculationUpdate) SetAbsentDays(i int) *SalaryCalculationUpdate {
	scu.mutation.ResetAbsentDays()
	scu.mutation.SetAbsentDays(i)
	return scu
}

// SetNillableAbsentDays sets the "absent_days" field if the given value is not nil.
func (scu *SalaryCalculationUpdate) SetNillableAbsentDays(i *int) *SalaryCalculationUpdate {
	if i != nil {
		scu.SetAbsentDays(*i)
	}
	return scu
}

// AddAbsentDays adds i to the "absent_days" field.
func (scu *SalaryCalculationUpdate) AddAbsentDays(i int) *SalaryCalculationUpdate {
	scu.mutation.AddAbsentDays(i)
	return scu
}

// SetPresentDays sets the "present_days" field.
func (scu *SalaryCalculationUpdate) SetPresentDays(i int) *SalaryCalculationUpdate {
	scu.mutation.ResetPresentDays()
	scu.mutation.SetPresentDays(i)
	return scu
}

// SetNillablePresentDays sets the "present_days" field if the given value is not nil.
func (scu *SalaryCalculationUpdate) SetNillablePresentDays(i *int) *SalaryCalculationUpdate {
	if i != nil {
		scu.SetPresentDays(*i)
	}
	return scu
}

// AddPresentDays adds i to the "present_days" field.
func (scu *SalaryCalculationUpdate) AddPresentDays(i int) *SalaryCalculationUpdate {
	scu.mutation.AddPresentDays(i)
	return scu
}

// SetFinalSalary sets the "final_salary" field.
func (scu *SalaryCalculationUpdate) SetFinalSalary(f float64) *SalaryCalculationUpdate {
	scu.mutation.ResetFinalSalary()
	scu.mutation.SetFinalSalary(f)
	return scu
}

// AddFinalSalary adds f to the "final_salary" field.
func (scu *SalaryCalculationUpdate) AddFinalSalary(f float64) *SalaryCalculationUpdate {
	scu.mutation.AddFinalSalary(f)
	return scu
}

// SetDeductionAmount sets the "deduction_amount" field.
func (scu *SalaryCalculationUpdate) SetDeductionAmount(f float64) *SalaryCalculationUpdate {
	scu.mutation.ResetDeductionAmount()
	scu.mutation.SetDeductionAmount(f)
	return scu
}

// SetNillableDeductionAmount sets the "deduction_amount" field if the given value is not nil.
func (scu *SalaryCalculationUpdate) SetNillableDeductionAmount(f *float64) *SalaryCalculationUpdate {
	if f != nil {
		scu.SetDeductionAmount(*f)
	}
	return scu
}

// AddDeductionAmount adds f to the "deduction_amount" field.
func (scu *SalaryCalculationUpdate) AddDeductionAmount(f float64) *SalaryCalculationUpdate {
	scu.mutation.AddDeductionAmount(f)
	return scu
}

// SetCalculationFormula sets the "calculation_formula" field.
func (scu *SalaryCalculationUpdate) SetCalculationFormula(s string) *SalaryCalculationUpdate {
	scu.mutation.SetCalculationFormula(s)
	return scu
}

// SetNillableCalculationFormula sets the "calculation_formula" field if the given value is not nil.
func (scu *SalaryCalculationUpdate) SetNillableCalculationFormula(s *string) *SalaryCalculationUpdate {
	if s != nil {
		scu.SetCalculationFormula(*s)
	}
	return scu
}

// ClearCalculationFormula clears the value of the "calculation_formula" field.
func (scu *SalaryCalculationUpdate) ClearCalculationFormula() *SalaryCalculationUpdate {
	scu.mutation.ClearCalculationFormula()
	return scu
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (scu *SalaryCalculationUpdate) SetEmployee(e *Employee) *SalaryCalculationUpdate {
	return scu.SetEmployeeID(e.ID)
}

// Mutation returns the SalaryCalculationMutation object of the builder.
func (scu *SalaryCalculationUpdate) Mutation() *SalaryCalculationMutation {
	return scu.mutation
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (scu *SalaryCalculationUpdate) ClearEmployee() *SalaryCalculationUpdate {
	scu.mutation.ClearEmployee()
	return scu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *SalaryCalculationUpdate) Save(ctx context.Context) (int, error) {
	scu.defaults()
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *SalaryCalculationUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *SalaryCalculationUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *SalaryCalculationUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *SalaryCalculationUpdate) defaults() {
	if _, ok := scu.mutation.ModifiedAt(); !ok {
		v := salarycalculation.UpdateDefaultModifiedAt()
		scu.mutation.SetModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *SalaryCalculationUpdate) check() error {
	if _, ok := scu.mutation.EmployeeID(); scu.mutation.EmployeeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SalaryCalculation.employee"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scu *SalaryCalculationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SalaryCalculationUpdate {
	scu.modifiers = append(scu.modifiers, modifiers...)
	return scu
}

func (scu *SalaryCalculationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(salarycalculation.Table, salarycalculation.Columns, sqlgraph.NewFieldSpec(salarycalculation.FieldID, field.TypeUint64))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.ModifiedAt(); ok {
		_spec.SetField(salarycalculation.FieldModifiedAt, field.TypeTime, value)
	}
	if value, ok := scu.mutation.DeletedAt(); ok {
		_spec.SetField(salarycalculation.FieldDeletedAt, field.TypeTime, value)
	}
	if scu.mutation.DeletedAtCleared() {
		_spec.ClearField(salarycalculation.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := scu.mutation.CalculationMonth(); ok {
		_spec.SetField(salarycalculation.FieldCalculationMonth, field.TypeTime, value)
	}
	if value, ok := scu.mutation.BaseSalary(); ok {
		_spec.SetField(salarycalculation.FieldBaseSalary, field.TypeFloat64, value)
	}
	if value, ok := scu.mutation.AddedBaseSalary(); ok {
		_spec.AddField(salarycalculation.FieldBaseSalary, field.TypeFloat64, value)
	}
	if value, ok := scu.mutation.TotalWorkingDays(); ok {
		_spec.SetField(salarycalculation.FieldTotalWorkingDays, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedTotalWorkingDays(); ok {
		_spec.AddField(salarycalculation.FieldTotalWorkingDays, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AbsentDays(); ok {
		_spec.SetField(salarycalculation.FieldAbsentDays, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedAbsentDays(); ok {
		_spec.AddField(salarycalculation.FieldAbsentDays, field.TypeInt, value)
	}
	if value, ok := scu.mutation.PresentDays(); ok {
		_spec.SetField(salarycalculation.FieldPresentDays, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedPresentDays(); ok {
		_spec.AddField(salarycalculation.FieldPresentDays, field.TypeInt, value)
	}
	if value, ok := scu.mutation.FinalSalary(); ok {
		_spec.SetField(salarycalculation.FieldFinalSalary, field.TypeFloat64, value)
	}
	if value, ok := scu.mutation.AddedFinalSalary(); ok {
		_spec.AddField(salarycalculation.FieldFinalSalary, field.TypeFloat64, value)
	}
	if value, ok := scu.mutation.DeductionAmount(); ok {
		_spec.SetField(salarycalculation.FieldDeductionAmount, field.TypeFloat64, value)
	}
	if value, ok := scu.mutation.AddedDeductionAmount(); ok {
		_spec.AddField(salarycalculation.FieldDeductionAmount, field.TypeFloat64, value)
	}
	if value, ok := scu.mutation.CalculationFormula(); ok {
		_spec.SetField(salarycalculation.FieldCalculationFormula, field.TypeString, value)
	}
	if scu.mutation.CalculationFormulaCleared() {
		_spec.ClearField(salarycalculation.FieldCalculationFormula, field.TypeString)
	}
	if scu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salarycalculation.EmployeeTable,
			Columns: []string{salarycalculation.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salarycalculation.EmployeeTable,
			Columns: []string{salarycalculation.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{salarycalculation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// SalaryCalculationUpdateOne is the builder for updating a single SalaryCalculation entity.
type SalaryCalculationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SalaryCalculationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetModifiedAt sets the "modified_at" field.
func (scuo *SalaryCalculationUpdateOne) SetModifiedAt(t time.Time) *SalaryCalculationUpdateOne {
	scuo.mutation.SetModifiedAt(t)
	return scuo
}

// SetDeletedAt sets the "deleted_at" field.
func (scuo *SalaryCalculationUpdateOne) SetDeletedAt(t time.Time) *SalaryCalculationUpdateOne {
	scuo.mutation.SetDeletedAt(t)
	return scuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (scuo *SalaryCalculationUpdateOne) SetNillableDeletedAt(t *time.Time) *SalaryCalculationUpdateOne {
	if t != nil {
		scuo.SetDeletedAt(*t)
	}
	return scuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (scuo *SalaryCalculationUpdateOne) ClearDeletedAt() *SalaryCalculationUpdateOne {
	scuo.mutation.ClearDeletedAt()
	return scuo
}

// SetEmployeeID sets the "employee_id" field.
func (scuo *SalaryCalculationUpdateOne) SetEmployeeID(u uint64) *SalaryCalculationUpdateOne {
	scuo.mutation.SetEmployeeID(u)
	return scuo
}

// SetCalculationMonth sets the "calculation_month" field.
func (scuo *SalaryCalculationUpdateOne) SetCalculationMonth(t time.Time) *SalaryCalculationUpdateOne {
	scuo.mutation.SetCalculationMonth(t)
	return scuo
}

// SetBaseSalary sets the "base_salary" field.
func (scuo *SalaryCalculationUpdateOne) SetBaseSalary(f float64) *SalaryCalculationUpdateOne {
	scuo.mutation.ResetBaseSalary()
	scuo.mutation.SetBaseSalary(f)
	return scuo
}

// AddBaseSalary adds f to the "base_salary" field.
func (scuo *SalaryCalculationUpdateOne) AddBaseSalary(f float64) *SalaryCalculationUpdateOne {
	scuo.mutation.AddBaseSalary(f)
	return scuo
}

// SetTotalWorkingDays sets the "total_working_days" field.
func (scuo *SalaryCalculationUpdateOne) SetTotalWorkingDays(i int) *SalaryCalculationUpdateOne {
	scuo.mutation.ResetTotalWorkingDays()
	scuo.mutation.SetTotalWorkingDays(i)
	return scuo
}

// AddTotalWorkingDays adds i to the "total_working_days" field.
func (scuo *SalaryCalculationUpdateOne) AddTotalWorkingDays(i int) *SalaryCalculationUpdateOne {
	scuo.mutation.AddTotalWorkingDays(i)
	return scuo
}

// SetAbsentDays sets the "absent_days" field.
func (scuo *SalaryCalculationUpdateOne) SetAbsentDays(i int) *SalaryCalculationUpdateOne {
	scuo.mutation.ResetAbsentDays()
	scuo.mutation.SetAbsentDays(i)
	return scuo
}

// SetNillableAbsentDays sets the "absent_days" field if the given value is not nil.
func (scuo *SalaryCalculationUpdateOne) SetNillableAbsentDays(i *int) *SalaryCalculationUpdateOne {
	if i != nil {
		scuo.SetAbsentDays(*i)
	}
	return scuo
}

// AddAbsentDays adds i to the "absent_days" field.
func (scuo *SalaryCalculationUpdateOne) AddAbsentDays(i int) *SalaryCalculationUpdateOne {
	scuo.mutation.AddAbsentDays(i)
	return scuo
}

// SetPresentDays sets the "present_days" field.
func (scuo *SalaryCalculationUpdateOne) SetPresentDays(i int) *SalaryCalculationUpdateOne {
	scuo.mutation.ResetPresentDays()
	scuo.mutation.SetPresentDays(i)
	return scuo
}

// SetNillablePresentDays sets the "present_days" field if the given value is not nil.
func (scuo *SalaryCalculationUpdateOne) SetNillablePresentDays(i *int) *SalaryCalculationUpdateOne {
	if i != nil {
		scuo.SetPresentDays(*i)
	}
	return scuo
}

// AddPresentDays adds i to the "present_days" field.
func (scuo *SalaryCalculationUpdateOne) AddPresentDays(i int) *SalaryCalculationUpdateOne {
	scuo.mutation.AddPresentDays(i)
	return scuo
}

// SetFinalSalary sets the "final_salary" field.
func (scuo *SalaryCalculationUpdateOne) SetFinalSalary(f float64) *SalaryCalculationUpdateOne {
	scuo.mutation.ResetFinalSalary()
	scuo.mutation.SetFinalSalary(f)
	return scuo
}

// AddFinalSalary adds f to the "final_salary" field.
func (scuo *SalaryCalculationUpdateOne) AddFinalSalary(f float64) *SalaryCalculationUpdateOne {
	scuo.mutation.AddFinalSalary(f)
	return scuo
}

// SetDeductionAmount sets the "deduction_amount" field.
func (scuo *SalaryCalculationUpdateOne) SetDeductionAmount(f float64) *SalaryCalculationUpdateOne {
	scuo.mutation.ResetDeductionAmount()
	scuo.mutation.SetDeductionAmount(f)
	return scuo
}

// SetNillableDeductionAmount sets the "deduction_amount" field if the given value is not nil.
func (scuo *SalaryCalculationUpdateOne) SetNillableDeductionAmount(f *float64) *SalaryCalculationUpdateOne {
	if f != nil {
		scuo.SetDeductionAmount(*f)
	}
	return scuo
}

// AddDeductionAmount adds f to the "deduction_amount" field.
func (scuo *SalaryCalculationUpdateOne) AddDeductionAmount(f float64) *SalaryCalculationUpdateOne {
	scuo.mutation.AddDeductionAmount(f)
	return scuo
}

// SetCalculationFormula sets the "calculation_formula" field.
func (scuo *SalaryCalculationUpdateOne) SetCalculationFormula(s string) *SalaryCalculationUpdateOne {
	scuo.mutation.SetCalculationFormula(s)
	return scuo
}

// SetNillableCalculationFormula sets the "calculation_formula" field if the given value is not nil.
func (scuo *SalaryCalculationUpdateOne) SetNillableCalculationFormula(s *string) *SalaryCalculationUpdateOne {
	if s != nil {
		scuo.SetCalculationFormula(*s)
	}
	return scuo
}

// ClearCalculationFormula clears the value of the "calculation_formula" field.
func (scuo *SalaryCalculationUpdateOne) ClearCalculationFormula() *SalaryCalculationUpdateOne {
	scuo.mutation.ClearCalculationFormula()
	return scuo
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (scuo *SalaryCalculationUpdateOne) SetEmployee(e *Employee) *SalaryCalculationUpdateOne {
	return scuo.SetEmployeeID(e.ID)
}

// Mutation returns the SalaryCalculationMutation object of the builder.
func (scuo *SalaryCalculationUpdateOne) Mutation() *SalaryCalculationMutation {
	return scuo.mutation
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (scuo *SalaryCalculationUpdateOne) ClearEmployee() *SalaryCalculationUpdateOne {
	scuo.mutation.ClearEmployee()
	return scuo
}

// Where appends a list predicates to the SalaryCalculationUpdate builder.
func (scuo *SalaryCalculationUpdateOne) Where(ps ...predicate.SalaryCalculation) *SalaryCalculationUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *SalaryCalculationUpdateOne) Select(field string, fields ...string) *SalaryCalculationUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated SalaryCalculation entity.
func (scuo *SalaryCalculationUpdateOne) Save(ctx context.Context) (*SalaryCalculation, error) {
	scuo.defaults()
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *SalaryCalculationUpdateOne) SaveX(ctx context.Context) *SalaryCalculation {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *SalaryCalculationUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *SalaryCalculationUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *SalaryCalculationUpdateOne) defaults() {
	if _, ok := scuo.mutation.ModifiedAt(); !ok {
		v := salarycalculation.UpdateDefaultModifiedAt()
		scuo.mutation.SetModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *SalaryCalculationUpdateOne) check() error {
	if _, ok := scuo.mutation.EmployeeID(); scuo.mutation.EmployeeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SalaryCalculation.employee"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (scuo *SalaryCalculationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SalaryCalculationUpdateOne {
	scuo.modifiers = append(scuo.modifiers, modifiers...)
	return scuo
}

func (scuo *SalaryCalculationUpdateOne) sqlSave(ctx context.Context) (_node *SalaryCalculation, err error) {
	if err := scuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(salarycalculation.Table, salarycalculation.Columns, sqlgraph.NewFieldSpec(salarycalculation.FieldID, field.TypeUint64))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SalaryCalculation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, salarycalculation.FieldID)
		for _, f := range fields {
			if !salarycalculation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != salarycalculation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.ModifiedAt(); ok {
		_spec.SetField(salarycalculation.FieldModifiedAt, field.TypeTime, value)
	}
	if value, ok := scuo.mutation.DeletedAt(); ok {
		_spec.SetField(salarycalculation.FieldDeletedAt, field.TypeTime, value)
	}
	if scuo.mutation.DeletedAtCleared() {
		_spec.ClearField(salarycalculation.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := scuo.mutation.CalculationMonth(); ok {
		_spec.SetField(salarycalculation.FieldCalculationMonth, field.TypeTime, value)
	}
	if value, ok := scuo.mutation.BaseSalary(); ok {
		_spec.SetField(salarycalculation.FieldBaseSalary, field.TypeFloat64, value)
	}
	if value, ok := scuo.mutation.AddedBaseSalary(); ok {
		_spec.AddField(salarycalculation.FieldBaseSalary, field.TypeFloat64, value)
	}
	if value, ok := scuo.mutation.TotalWorkingDays(); ok {
		_spec.SetField(salarycalculation.FieldTotalWorkingDays, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedTotalWorkingDays(); ok {
		_spec.AddField(salarycalculation.FieldTotalWorkingDays, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AbsentDays(); ok {
		_spec.SetField(salarycalculation.FieldAbsentDays, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedAbsentDays(); ok {
		_spec.AddField(salarycalculation.FieldAbsentDays, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.PresentDays(); ok {
		_spec.SetField(salarycalculation.FieldPresentDays, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedPresentDays(); ok {
		_spec.AddField(salarycalculation.FieldPresentDays, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.FinalSalary(); ok {
		_spec.SetField(salarycalculation.FieldFinalSalary, field.TypeFloat64, value)
	}
	if value, ok := scuo.mutation.AddedFinalSalary(); ok {
		_spec.AddField(salarycalculation.FieldFinalSalary, field.TypeFloat64, value)
	}
	if value, ok := scuo.mutation.DeductionAmount(); ok {
		_spec.SetField(salarycalculation.FieldDeductionAmount, field.TypeFloat64, value)
	}
	if value, ok := scuo.mutation.AddedDeductionAmount(); ok {
		_spec.AddField(salarycalculation.FieldDeductionAmount, field.TypeFloat64, value)
	}
	if value, ok := scuo.mutation.CalculationFormula(); ok {
		_spec.SetField(salarycalculation.FieldCalculationFormula, field.TypeString, value)
	}
	if scuo.mutation.CalculationFormulaCleared() {
		_spec.ClearField(salarycalculation.FieldCalculationFormula, field.TypeString)
	}
	if scuo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salarycalculation.EmployeeTable,
			Columns: []string{salarycalculation.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   salarycalculation.EmployeeTable,
			Columns: []string{salarycalculation.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(scuo.modifiers...)
	_node = &SalaryCalculation{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{salarycalculation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
