// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hokusai/ent/attendance"
	"hokusai/ent/employee"
	"hokusai/ent/salarycalculation"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeeCreate is the builder for creating a Employee entity.
type EmployeeCreate struct {
	config
	mutation *EmployeeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ec *EmployeeCreate) SetCreatedAt(t time.Time) *EmployeeCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableCreatedAt(t *time.Time) *EmployeeCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetModifiedAt sets the "modified_at" field.
func (ec *EmployeeCreate) SetModifiedAt(t time.Time) *EmployeeCreate {
	ec.mutation.SetModifiedAt(t)
	return ec
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableModifiedAt(t *time.Time) *EmployeeCreate {
	if t != nil {
		ec.SetModifiedAt(*t)
	}
	return ec
}

// SetDeletedAt sets the "deleted_at" field.
func (ec *EmployeeCreate) SetDeletedAt(t time.Time) *EmployeeCreate {
	ec.mutation.SetDeletedAt(t)
	return ec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableDeletedAt(t *time.Time) *EmployeeCreate {
	if t != nil {
		ec.SetDeletedAt(*t)
	}
	return ec
}

// SetEmployeeID sets the "employee_id" field.
func (ec *EmployeeCreate) SetEmployeeID(s string) *EmployeeCreate {
	ec.mutation.SetEmployeeID(s)
	return ec
}

// SetFullName sets the "full_name" field.
func (ec *EmployeeCreate) SetFullName(s string) *EmployeeCreate {
	ec.mutation.SetFullName(s)
	return ec
}

// SetEmail sets the "email" field.
func (ec *EmployeeCreate) SetEmail(s string) *EmployeeCreate {
	ec.mutation.SetEmail(s)
	return ec
}

// SetPhone sets the "phone" field.
func (ec *EmployeeCreate) SetPhone(s string) *EmployeeCreate {
	ec.mutation.SetPhone(s)
	return ec
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillablePhone(s *string) *EmployeeCreate {
	if s != nil {
		ec.SetPhone(*s)
	}
	return ec
}

// SetPosition sets the "position" field.
func (ec *EmployeeCreate) SetPosition(s string) *EmployeeCreate {
	ec.mutation.SetPosition(s)
	return ec
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillablePosition(s *string) *EmployeeCreate {
	if s != nil {
		ec.SetPosition(*s)
	}
	return ec
}

// SetDepartment sets the "department" field.
func (ec *EmployeeCreate) SetDepartment(s string) *EmployeeCreate {
	ec.mutation.SetDepartment(s)
	return ec
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableDepartment(s *string) *EmployeeCreate {
	if s != nil {
		ec.SetDepartment(*s)
	}
	return ec
}

// SetHireDate sets the "hire_date" field.
func (ec *EmployeeCreate) SetHireDate(t time.Time) *EmployeeCreate {
	ec.mutation.SetHireDate(t)
	return ec
}

// SetBaseSalary sets the "base_salary" field.
func (ec *EmployeeCreate) SetBaseSalary(f float64) *EmployeeCreate {
	ec.mutation.SetBaseSalary(f)
	return ec
}

// SetNillableBaseSalary sets the "base_salary" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableBaseSalary(f *float64) *EmployeeCreate {
	if f != nil {
		ec.SetBaseSalary(*f)
	}
	return ec
}

// SetIsActive sets the "is_active" field.
func (ec *EmployeeCreate) SetIsActive(b bool) *EmployeeCreate {
	ec.mutation.SetIsActive(b)
	return ec
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableIsActive(b *bool) *EmployeeCreate {
	if b != nil {
		ec.SetIsActive(*b)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EmployeeCreate) SetID(u uint64) *EmployeeCreate {
	ec.mutation.SetID(u)
	return ec
}

// AddAttendanceIDs adds the "attendances" edge to the Attendance entity by IDs.
func (ec *EmployeeCreate) AddAttendanceIDs(ids ...uint64) *EmployeeCreate {
	ec.mutation.AddAttendanceIDs(ids...)
	return ec
}

// AddAttendances adds the "attendances" edges to the Attendance entity.
func (ec *EmployeeCreate) AddAttendances(a ...*Attendance) *EmployeeCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ec.AddAttendanceIDs(ids...)
}

// AddSalaryCalculationIDs adds the "salary_calculations" edge to the SalaryCalculation entity by IDs.
func (ec *EmployeeCreate) AddSalaryCalculationIDs(ids ...uint64) *EmployeeCreate {
	ec.mutation.AddSalaryCalculationIDs(ids...)
	return ec
}

// AddSalaryCalculations adds the "salary_calculations" edges to the SalaryCalculation entity.
func (ec *EmployeeCreate) AddSalaryCalculations(s ...*SalaryCalculation) *EmployeeCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ec.AddSalaryCalculationIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (ec *EmployeeCreate) Mutation() *EmployeeMutation {
	return ec.mutation
}

// Save creates the Employee in the database.
func (ec *EmployeeCreate) Save(ctx context.Context) (*Employee, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EmployeeCreate) SaveX(ctx context.Context) *Employee {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EmployeeCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EmployeeCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EmployeeCreate) defaults() {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := employee.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.ModifiedAt(); !ok {
		v := employee.DefaultModifiedAt()
		ec.mutation.SetModifiedAt(v)
	}
	if _, ok := ec.mutation.BaseSalary(); !ok {
		v := employee.DefaultBaseSalary
		ec.mutation.SetBaseSalary(v)
	}
	if _, ok := ec.mutation.IsActive(); !ok {
		v := employee.DefaultIsActive
		ec.mutation.SetIsActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EmployeeCreate) check() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Employee.created_at"`)}
	}
	if _, ok := ec.mutation.ModifiedAt(); !ok {
		return &ValidationError{Name: "modified_at", err: errors.New(`ent: missing required field "Employee.modified_at"`)}
	}
	if _, ok := ec.mutation.EmployeeID(); !ok {
		return &ValidationError{Name: "employee_id", err: errors.New(`ent: missing required field "Employee.employee_id"`)}
	}
	if v, ok := ec.mutation.EmployeeID(); ok {
		if err := employee.EmployeeIDValidator(v); err != nil {
			return &ValidationError{Name: "employee_id", err: fmt.Errorf(`ent: validator failed for field "Employee.employee_id": %w`, err)}
		}
	}
	if _, ok := ec.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`ent: missing required field "Employee.full_name"`)}
	}
	if v, ok := ec.mutation.FullName(); ok {
		if err := employee.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "Employee.full_name": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Employee.email"`)}
	}
	if v, ok := ec.mutation.Email(); ok {
		if err := employee.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Employee.email": %w`, err)}
		}
	}
	if v, ok := ec.mutation.Phone(); ok {
		if err := employee.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Employee.phone": %w`, err)}
		}
	}
	if v, ok := ec.mutation.Position(); ok {
		if err := employee.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "Employee.position": %w`, err)}
		}
	}
	if v, ok := ec.mutation.Department(); ok {
		if err := employee.DepartmentValidator(v); err != nil {
			return &ValidationError{Name: "department", err: fmt.Errorf(`ent: validator failed for field "Employee.department": %w`, err)}
		}
	}
	if _, ok := ec.mutation.HireDate(); !ok {
		return &ValidationError{Name: "hire_date", err: errors.New(`ent: missing required field "Employee.hire_date"`)}
	}
	if _, ok := ec.mutation.BaseSalary(); !ok {
		return &ValidationError{Name: "base_salary", err: errors.New(`ent: missing required field "Employee.base_salary"`)}
	}
	if _, ok := ec.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Employee.is_active"`)}
	}
	return nil
}

func (ec *EmployeeCreate) sqlSave(ctx context.Context) (*Employee, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EmployeeCreate) createSpec() (*Employee, *sqlgraph.CreateSpec) {
	var (
		_node = &Employee{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(employee.Table, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(employee.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.ModifiedAt(); ok {
		_spec.SetField(employee.FieldModifiedAt, field.TypeTime, value)
		_node.ModifiedAt = value
	}
	if value, ok := ec.mutation.DeletedAt(); ok {
		_spec.SetField(employee.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ec.mutation.EmployeeID(); ok {
		_spec.SetField(employee.FieldEmployeeID, field.TypeString, value)
		_node.EmployeeID = value
	}
	if value, ok := ec.mutation.FullName(); ok {
		_spec.SetField(employee.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := ec.mutation.Email(); ok {
		_spec.SetField(employee.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := ec.mutation.Phone(); ok {
		_spec.SetField(employee.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := ec.mutation.Position(); ok {
		_spec.SetField(employee.FieldPosition, field.TypeString, value)
		_node.Position = value
	}
	if value, ok := ec.mutation.Department(); ok {
		_spec.SetField(employee.FieldDepartment, field.TypeString, value)
		_node.Department = value
	}
	if value, ok := ec.mutation.HireDate(); ok {
		_spec.SetField(employee.FieldHireDate, field.TypeTime, value)
		_node.HireDate = value
	}
	if value, ok := ec.mutation.BaseSalary(); ok {
		_spec.SetField(employee.FieldBaseSalary, field.TypeFloat64, value)
		_node.BaseSalary = value
	}
	if value, ok := ec.mutation.IsActive(); ok {
		_spec.SetField(employee.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if nodes := ec.mutation.AttendancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AttendancesTable,
			Columns: []string{employee.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.SalaryCalculationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.SalaryCalculationsTable,
			Columns: []string{employee.SalaryCalculationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(salarycalculation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EmployeeCreateBulk is the builder for creating many Employee entities in bulk.
type EmployeeCreateBulk struct {
	config
	builders []*EmployeeCreate
}

// Save creates the Employee entities in the database.
func (ecb *EmployeeCreateBulk) Save(ctx context.Context) ([]*Employee, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Employee, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmployeeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EmployeeCreateBulk) SaveX(ctx context.Context) []*Employee {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EmployeeCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EmployeeCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
