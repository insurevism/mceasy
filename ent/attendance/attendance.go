// Code generated by ent, DO NOT EDIT.

package attendance

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the attendance type in the database.
	Label = "attendance"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldModifiedAt holds the string denoting the modified_at field in the database.
	FieldModifiedAt = "modified_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEmployeeID holds the string denoting the employee_id field in the database.
	FieldEmployeeID = "employee_id"
	// FieldAttendanceDate holds the string denoting the attendance_date field in the database.
	FieldAttendanceDate = "attendance_date"
	// FieldCheckInTime holds the string denoting the check_in_time field in the database.
	FieldCheckInTime = "check_in_time"
	// FieldCheckOutTime holds the string denoting the check_out_time field in the database.
	FieldCheckOutTime = "check_out_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldIsWeekend holds the string denoting the is_weekend field in the database.
	FieldIsWeekend = "is_weekend"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldMarkedByAdmin holds the string denoting the marked_by_admin field in the database.
	FieldMarkedByAdmin = "marked_by_admin"
	// EdgeEmployee holds the string denoting the employee edge name in mutations.
	EdgeEmployee = "employee"
	// Table holds the table name of the attendance in the database.
	Table = "attendances"
	// EmployeeTable is the table that holds the employee relation/edge.
	EmployeeTable = "attendances"
	// EmployeeInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeInverseTable = "employees"
	// EmployeeColumn is the table column denoting the employee relation/edge.
	EmployeeColumn = "employee_id"
)

// Columns holds all SQL columns for attendance fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldModifiedAt,
	FieldDeletedAt,
	FieldEmployeeID,
	FieldAttendanceDate,
	FieldCheckInTime,
	FieldCheckOutTime,
	FieldStatus,
	FieldIsWeekend,
	FieldNotes,
	FieldMarkedByAdmin,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultModifiedAt holds the default value on creation for the "modified_at" field.
	DefaultModifiedAt func() time.Time
	// UpdateDefaultModifiedAt holds the default value on update for the "modified_at" field.
	UpdateDefaultModifiedAt func() time.Time
	// DefaultIsWeekend holds the default value on creation for the "is_weekend" field.
	DefaultIsWeekend bool
	// DefaultMarkedByAdmin holds the default value on creation for the "marked_by_admin" field.
	DefaultMarkedByAdmin bool
)

// Status defines the type for the "status" enum field.
type Status string

// StatusAbsent is the default value of the Status enum.
const DefaultStatus = StatusAbsent

// Status values.
const (
	StatusPresent Status = "present"
	StatusAbsent  Status = "absent"
	StatusLate    Status = "late"
	StatusHalfDay Status = "half_day"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPresent, StatusAbsent, StatusLate, StatusHalfDay:
		return nil
	default:
		return fmt.Errorf("attendance: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Attendance queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByModifiedAt orders the results by the modified_at field.
func ByModifiedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEmployeeID orders the results by the employee_id field.
func ByEmployeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeID, opts...).ToFunc()
}

// ByAttendanceDate orders the results by the attendance_date field.
func ByAttendanceDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttendanceDate, opts...).ToFunc()
}

// ByCheckInTime orders the results by the check_in_time field.
func ByCheckInTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCheckInTime, opts...).ToFunc()
}

// ByCheckOutTime orders the results by the check_out_time field.
func ByCheckOutTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCheckOutTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByIsWeekend orders the results by the is_weekend field.
func ByIsWeekend(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsWeekend, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByMarkedByAdmin orders the results by the marked_by_admin field.
func ByMarkedByAdmin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMarkedByAdmin, opts...).ToFunc()
}

// ByEmployeeField orders the results by employee field.
func ByEmployeeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeStep(), sql.OrderByField(field, opts...))
	}
}
func newEmployeeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
	)
}
