// Code generated by ent, DO NOT EDIT.

package salarycalculation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the salarycalculation type in the database.
	Label = "salary_calculation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldModifiedAt holds the string denoting the modified_at field in the database.
	FieldModifiedAt = "modified_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEmployeeID holds the string denoting the employee_id field in the database.
	FieldEmployeeID = "employee_id"
	// FieldCalculationMonth holds the string denoting the calculation_month field in the database.
	FieldCalculationMonth = "calculation_month"
	// FieldBaseSalary holds the string denoting the base_salary field in the database.
	FieldBaseSalary = "base_salary"
	// FieldTotalWorkingDays holds the string denoting the total_working_days field in the database.
	FieldTotalWorkingDays = "total_working_days"
	// FieldAbsentDays holds the string denoting the absent_days field in the database.
	FieldAbsentDays = "absent_days"
	// FieldPresentDays holds the string denoting the present_days field in the database.
	FieldPresentDays = "present_days"
	// FieldFinalSalary holds the string denoting the final_salary field in the database.
	FieldFinalSalary = "final_salary"
	// FieldDeductionAmount holds the string denoting the deduction_amount field in the database.
	FieldDeductionAmount = "deduction_amount"
	// FieldCalculationFormula holds the string denoting the calculation_formula field in the database.
	FieldCalculationFormula = "calculation_formula"
	// EdgeEmployee holds the string denoting the employee edge name in mutations.
	EdgeEmployee = "employee"
	// Table holds the table name of the salarycalculation in the database.
	Table = "salary_calculations"
	// EmployeeTable is the table that holds the employee relation/edge.
	EmployeeTable = "salary_calculations"
	// EmployeeInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeInverseTable = "employees"
	// EmployeeColumn is the table column denoting the employee relation/edge.
	EmployeeColumn = "employee_id"
)

// Columns holds all SQL columns for salarycalculation fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldModifiedAt,
	FieldDeletedAt,
	FieldEmployeeID,
	FieldCalculationMonth,
	FieldBaseSalary,
	FieldTotalWorkingDays,
	FieldAbsentDays,
	FieldPresentDays,
	FieldFinalSalary,
	FieldDeductionAmount,
	FieldCalculationFormula,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultModifiedAt holds the default value on creation for the "modified_at" field.
	DefaultModifiedAt func() time.Time
	// UpdateDefaultModifiedAt holds the default value on update for the "modified_at" field.
	UpdateDefaultModifiedAt func() time.Time
	// DefaultAbsentDays holds the default value on creation for the "absent_days" field.
	DefaultAbsentDays int
	// DefaultPresentDays holds the default value on creation for the "present_days" field.
	DefaultPresentDays int
	// DefaultDeductionAmount holds the default value on creation for the "deduction_amount" field.
	DefaultDeductionAmount float64
)

// OrderOption defines the ordering options for the SalaryCalculation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByModifiedAt orders the results by the modified_at field.
func ByModifiedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEmployeeID orders the results by the employee_id field.
func ByEmployeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeID, opts...).ToFunc()
}

// ByCalculationMonth orders the results by the calculation_month field.
func ByCalculationMonth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCalculationMonth, opts...).ToFunc()
}

// ByBaseSalary orders the results by the base_salary field.
func ByBaseSalary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBaseSalary, opts...).ToFunc()
}

// ByTotalWorkingDays orders the results by the total_working_days field.
func ByTotalWorkingDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalWorkingDays, opts...).ToFunc()
}

// ByAbsentDays orders the results by the absent_days field.
func ByAbsentDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbsentDays, opts...).ToFunc()
}

// ByPresentDays orders the results by the present_days field.
func ByPresentDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPresentDays, opts...).ToFunc()
}

// ByFinalSalary orders the results by the final_salary field.
func ByFinalSalary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinalSalary, opts...).ToFunc()
}

// ByDeductionAmount orders the results by the deduction_amount field.
func ByDeductionAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeductionAmount, opts...).ToFunc()
}

// ByCalculationFormula orders the results by the calculation_formula field.
func ByCalculationFormula(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCalculationFormula, opts...).ToFunc()
}

// ByEmployeeField orders the results by employee field.
func ByEmployeeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeStep(), sql.OrderByField(field, opts...))
	}
}
func newEmployeeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
	)
}
