// Code generated by ent, DO NOT EDIT.

package salarycalculation

import (
	"hokusai/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldCreatedAt, v))
}

// ModifiedAt applies equality check predicate on the "modified_at" field. It's identical to ModifiedAtEQ.
func ModifiedAt(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldModifiedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldDeletedAt, v))
}

// EmployeeID applies equality check predicate on the "employee_id" field. It's identical to EmployeeIDEQ.
func EmployeeID(v uint64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldEmployeeID, v))
}

// CalculationMonth applies equality check predicate on the "calculation_month" field. It's identical to CalculationMonthEQ.
func CalculationMonth(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldCalculationMonth, v))
}

// BaseSalary applies equality check predicate on the "base_salary" field. It's identical to BaseSalaryEQ.
func BaseSalary(v float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldBaseSalary, v))
}

// TotalWorkingDays applies equality check predicate on the "total_working_days" field. It's identical to TotalWorkingDaysEQ.
func TotalWorkingDays(v int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldTotalWorkingDays, v))
}

// AbsentDays applies equality check predicate on the "absent_days" field. It's identical to AbsentDaysEQ.
func AbsentDays(v int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldAbsentDays, v))
}

// PresentDays applies equality check predicate on the "present_days" field. It's identical to PresentDaysEQ.
func PresentDays(v int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldPresentDays, v))
}

// FinalSalary applies equality check predicate on the "final_salary" field. It's identical to FinalSalaryEQ.
func FinalSalary(v float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldFinalSalary, v))
}

// DeductionAmount applies equality check predicate on the "deduction_amount" field. It's identical to DeductionAmountEQ.
func DeductionAmount(v float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldDeductionAmount, v))
}

// CalculationFormula applies equality check predicate on the "calculation_formula" field. It's identical to CalculationFormulaEQ.
func CalculationFormula(v string) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldCalculationFormula, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLTE(FieldCreatedAt, v))
}

// ModifiedAtEQ applies the EQ predicate on the "modified_at" field.
func ModifiedAtEQ(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldModifiedAt, v))
}

// ModifiedAtNEQ applies the NEQ predicate on the "modified_at" field.
func ModifiedAtNEQ(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNEQ(FieldModifiedAt, v))
}

// ModifiedAtIn applies the In predicate on the "modified_at" field.
func ModifiedAtIn(vs ...time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldIn(FieldModifiedAt, vs...))
}

// ModifiedAtNotIn applies the NotIn predicate on the "modified_at" field.
func ModifiedAtNotIn(vs ...time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNotIn(FieldModifiedAt, vs...))
}

// ModifiedAtGT applies the GT predicate on the "modified_at" field.
func ModifiedAtGT(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGT(FieldModifiedAt, v))
}

// ModifiedAtGTE applies the GTE predicate on the "modified_at" field.
func ModifiedAtGTE(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGTE(FieldModifiedAt, v))
}

// ModifiedAtLT applies the LT predicate on the "modified_at" field.
func ModifiedAtLT(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLT(FieldModifiedAt, v))
}

// ModifiedAtLTE applies the LTE predicate on the "modified_at" field.
func ModifiedAtLTE(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLTE(FieldModifiedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNotNull(FieldDeletedAt))
}

// EmployeeIDEQ applies the EQ predicate on the "employee_id" field.
func EmployeeIDEQ(v uint64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeIDNEQ applies the NEQ predicate on the "employee_id" field.
func EmployeeIDNEQ(v uint64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNEQ(FieldEmployeeID, v))
}

// EmployeeIDIn applies the In predicate on the "employee_id" field.
func EmployeeIDIn(vs ...uint64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldIn(FieldEmployeeID, vs...))
}

// EmployeeIDNotIn applies the NotIn predicate on the "employee_id" field.
func EmployeeIDNotIn(vs ...uint64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNotIn(FieldEmployeeID, vs...))
}

// CalculationMonthEQ applies the EQ predicate on the "calculation_month" field.
func CalculationMonthEQ(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldCalculationMonth, v))
}

// CalculationMonthNEQ applies the NEQ predicate on the "calculation_month" field.
func CalculationMonthNEQ(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNEQ(FieldCalculationMonth, v))
}

// CalculationMonthIn applies the In predicate on the "calculation_month" field.
func CalculationMonthIn(vs ...time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldIn(FieldCalculationMonth, vs...))
}

// CalculationMonthNotIn applies the NotIn predicate on the "calculation_month" field.
func CalculationMonthNotIn(vs ...time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNotIn(FieldCalculationMonth, vs...))
}

// CalculationMonthGT applies the GT predicate on the "calculation_month" field.
func CalculationMonthGT(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGT(FieldCalculationMonth, v))
}

// CalculationMonthGTE applies the GTE predicate on the "calculation_month" field.
func CalculationMonthGTE(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGTE(FieldCalculationMonth, v))
}

// CalculationMonthLT applies the LT predicate on the "calculation_month" field.
func CalculationMonthLT(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLT(FieldCalculationMonth, v))
}

// CalculationMonthLTE applies the LTE predicate on the "calculation_month" field.
func CalculationMonthLTE(v time.Time) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLTE(FieldCalculationMonth, v))
}

// BaseSalaryEQ applies the EQ predicate on the "base_salary" field.
func BaseSalaryEQ(v float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldBaseSalary, v))
}

// BaseSalaryNEQ applies the NEQ predicate on the "base_salary" field.
func BaseSalaryNEQ(v float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNEQ(FieldBaseSalary, v))
}

// BaseSalaryIn applies the In predicate on the "base_salary" field.
func BaseSalaryIn(vs ...float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldIn(FieldBaseSalary, vs...))
}

// BaseSalaryNotIn applies the NotIn predicate on the "base_salary" field.
func BaseSalaryNotIn(vs ...float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNotIn(FieldBaseSalary, vs...))
}

// BaseSalaryGT applies the GT predicate on the "base_salary" field.
func BaseSalaryGT(v float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGT(FieldBaseSalary, v))
}

// BaseSalaryGTE applies the GTE predicate on the "base_salary" field.
func BaseSalaryGTE(v float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGTE(FieldBaseSalary, v))
}

// BaseSalaryLT applies the LT predicate on the "base_salary" field.
func BaseSalaryLT(v float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLT(FieldBaseSalary, v))
}

// BaseSalaryLTE applies the LTE predicate on the "base_salary" field.
func BaseSalaryLTE(v float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLTE(FieldBaseSalary, v))
}

// TotalWorkingDaysEQ applies the EQ predicate on the "total_working_days" field.
func TotalWorkingDaysEQ(v int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldTotalWorkingDays, v))
}

// TotalWorkingDaysNEQ applies the NEQ predicate on the "total_working_days" field.
func TotalWorkingDaysNEQ(v int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNEQ(FieldTotalWorkingDays, v))
}

// TotalWorkingDaysIn applies the In predicate on the "total_working_days" field.
func TotalWorkingDaysIn(vs ...int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldIn(FieldTotalWorkingDays, vs...))
}

// TotalWorkingDaysNotIn applies the NotIn predicate on the "total_working_days" field.
func TotalWorkingDaysNotIn(vs ...int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNotIn(FieldTotalWorkingDays, vs...))
}

// TotalWorkingDaysGT applies the GT predicate on the "total_working_days" field.
func TotalWorkingDaysGT(v int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGT(FieldTotalWorkingDays, v))
}

// TotalWorkingDaysGTE applies the GTE predicate on the "total_working_days" field.
func TotalWorkingDaysGTE(v int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGTE(FieldTotalWorkingDays, v))
}

// TotalWorkingDaysLT applies the LT predicate on the "total_working_days" field.
func TotalWorkingDaysLT(v int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLT(FieldTotalWorkingDays, v))
}

// TotalWorkingDaysLTE applies the LTE predicate on the "total_working_days" field.
func TotalWorkingDaysLTE(v int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLTE(FieldTotalWorkingDays, v))
}

// AbsentDaysEQ applies the EQ predicate on the "absent_days" field.
func AbsentDaysEQ(v int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldAbsentDays, v))
}

// AbsentDaysNEQ applies the NEQ predicate on the "absent_days" field.
func AbsentDaysNEQ(v int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNEQ(FieldAbsentDays, v))
}

// AbsentDaysIn applies the In predicate on the "absent_days" field.
func AbsentDaysIn(vs ...int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldIn(FieldAbsentDays, vs...))
}

// AbsentDaysNotIn applies the NotIn predicate on the "absent_days" field.
func AbsentDaysNotIn(vs ...int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNotIn(FieldAbsentDays, vs...))
}

// AbsentDaysGT applies the GT predicate on the "absent_days" field.
func AbsentDaysGT(v int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGT(FieldAbsentDays, v))
}

// AbsentDaysGTE applies the GTE predicate on the "absent_days" field.
func AbsentDaysGTE(v int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGTE(FieldAbsentDays, v))
}

// AbsentDaysLT applies the LT predicate on the "absent_days" field.
func AbsentDaysLT(v int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLT(FieldAbsentDays, v))
}

// AbsentDaysLTE applies the LTE predicate on the "absent_days" field.
func AbsentDaysLTE(v int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLTE(FieldAbsentDays, v))
}

// PresentDaysEQ applies the EQ predicate on the "present_days" field.
func PresentDaysEQ(v int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldPresentDays, v))
}

// PresentDaysNEQ applies the NEQ predicate on the "present_days" field.
func PresentDaysNEQ(v int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNEQ(FieldPresentDays, v))
}

// PresentDaysIn applies the In predicate on the "present_days" field.
func PresentDaysIn(vs ...int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldIn(FieldPresentDays, vs...))
}

// PresentDaysNotIn applies the NotIn predicate on the "present_days" field.
func PresentDaysNotIn(vs ...int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNotIn(FieldPresentDays, vs...))
}

// PresentDaysGT applies the GT predicate on the "present_days" field.
func PresentDaysGT(v int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGT(FieldPresentDays, v))
}

// PresentDaysGTE applies the GTE predicate on the "present_days" field.
func PresentDaysGTE(v int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGTE(FieldPresentDays, v))
}

// PresentDaysLT applies the LT predicate on the "present_days" field.
func PresentDaysLT(v int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLT(FieldPresentDays, v))
}

// PresentDaysLTE applies the LTE predicate on the "present_days" field.
func PresentDaysLTE(v int) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLTE(FieldPresentDays, v))
}

// FinalSalaryEQ applies the EQ predicate on the "final_salary" field.
func FinalSalaryEQ(v float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldFinalSalary, v))
}

// FinalSalaryNEQ applies the NEQ predicate on the "final_salary" field.
func FinalSalaryNEQ(v float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNEQ(FieldFinalSalary, v))
}

// FinalSalaryIn applies the In predicate on the "final_salary" field.
func FinalSalaryIn(vs ...float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldIn(FieldFinalSalary, vs...))
}

// FinalSalaryNotIn applies the NotIn predicate on the "final_salary" field.
func FinalSalaryNotIn(vs ...float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNotIn(FieldFinalSalary, vs...))
}

// FinalSalaryGT applies the GT predicate on the "final_salary" field.
func FinalSalaryGT(v float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGT(FieldFinalSalary, v))
}

// FinalSalaryGTE applies the GTE predicate on the "final_salary" field.
func FinalSalaryGTE(v float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGTE(FieldFinalSalary, v))
}

// FinalSalaryLT applies the LT predicate on the "final_salary" field.
func FinalSalaryLT(v float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLT(FieldFinalSalary, v))
}

// FinalSalaryLTE applies the LTE predicate on the "final_salary" field.
func FinalSalaryLTE(v float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLTE(FieldFinalSalary, v))
}

// DeductionAmountEQ applies the EQ predicate on the "deduction_amount" field.
func DeductionAmountEQ(v float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldDeductionAmount, v))
}

// DeductionAmountNEQ applies the NEQ predicate on the "deduction_amount" field.
func DeductionAmountNEQ(v float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNEQ(FieldDeductionAmount, v))
}

// DeductionAmountIn applies the In predicate on the "deduction_amount" field.
func DeductionAmountIn(vs ...float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldIn(FieldDeductionAmount, vs...))
}

// DeductionAmountNotIn applies the NotIn predicate on the "deduction_amount" field.
func DeductionAmountNotIn(vs ...float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNotIn(FieldDeductionAmount, vs...))
}

// DeductionAmountGT applies the GT predicate on the "deduction_amount" field.
func DeductionAmountGT(v float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGT(FieldDeductionAmount, v))
}

// DeductionAmountGTE applies the GTE predicate on the "deduction_amount" field.
func DeductionAmountGTE(v float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGTE(FieldDeductionAmount, v))
}

// DeductionAmountLT applies the LT predicate on the "deduction_amount" field.
func DeductionAmountLT(v float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLT(FieldDeductionAmount, v))
}

// DeductionAmountLTE applies the LTE predicate on the "deduction_amount" field.
func DeductionAmountLTE(v float64) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLTE(FieldDeductionAmount, v))
}

// CalculationFormulaEQ applies the EQ predicate on the "calculation_formula" field.
func CalculationFormulaEQ(v string) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEQ(FieldCalculationFormula, v))
}

// CalculationFormulaNEQ applies the NEQ predicate on the "calculation_formula" field.
func CalculationFormulaNEQ(v string) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNEQ(FieldCalculationFormula, v))
}

// CalculationFormulaIn applies the In predicate on the "calculation_formula" field.
func CalculationFormulaIn(vs ...string) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldIn(FieldCalculationFormula, vs...))
}

// CalculationFormulaNotIn applies the NotIn predicate on the "calculation_formula" field.
func CalculationFormulaNotIn(vs ...string) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNotIn(FieldCalculationFormula, vs...))
}

// CalculationFormulaGT applies the GT predicate on the "calculation_formula" field.
func CalculationFormulaGT(v string) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGT(FieldCalculationFormula, v))
}

// CalculationFormulaGTE applies the GTE predicate on the "calculation_formula" field.
func CalculationFormulaGTE(v string) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldGTE(FieldCalculationFormula, v))
}

// CalculationFormulaLT applies the LT predicate on the "calculation_formula" field.
func CalculationFormulaLT(v string) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLT(FieldCalculationFormula, v))
}

// CalculationFormulaLTE applies the LTE predicate on the "calculation_formula" field.
func CalculationFormulaLTE(v string) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldLTE(FieldCalculationFormula, v))
}

// CalculationFormulaContains applies the Contains predicate on the "calculation_formula" field.
func CalculationFormulaContains(v string) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldContains(FieldCalculationFormula, v))
}

// CalculationFormulaHasPrefix applies the HasPrefix predicate on the "calculation_formula" field.
func CalculationFormulaHasPrefix(v string) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldHasPrefix(FieldCalculationFormula, v))
}

// CalculationFormulaHasSuffix applies the HasSuffix predicate on the "calculation_formula" field.
func CalculationFormulaHasSuffix(v string) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldHasSuffix(FieldCalculationFormula, v))
}

// CalculationFormulaIsNil applies the IsNil predicate on the "calculation_formula" field.
func CalculationFormulaIsNil() predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldIsNull(FieldCalculationFormula))
}

// CalculationFormulaNotNil applies the NotNil predicate on the "calculation_formula" field.
func CalculationFormulaNotNil() predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldNotNull(FieldCalculationFormula))
}

// CalculationFormulaEqualFold applies the EqualFold predicate on the "calculation_formula" field.
func CalculationFormulaEqualFold(v string) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldEqualFold(FieldCalculationFormula, v))
}

// CalculationFormulaContainsFold applies the ContainsFold predicate on the "calculation_formula" field.
func CalculationFormulaContainsFold(v string) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(sql.FieldContainsFold(FieldCalculationFormula, v))
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.SalaryCalculation {
	return predicate.SalaryCalculation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(func(s *sql.Selector) {
		step := newEmployeeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SalaryCalculation) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SalaryCalculation) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SalaryCalculation) predicate.SalaryCalculation {
	return predicate.SalaryCalculation(func(s *sql.Selector) {
		p(s.Not())
	})
}
