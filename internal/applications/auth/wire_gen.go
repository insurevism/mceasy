// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package auth

import (
	"github.com/go-redis/redis/v8"
	"github.com/google/wire"
	"hokusai/ent"
	"hokusai/internal/applications/auth/service"
	"hokusai/internal/applications/auth/utils/password_hasher"
	"hokusai/internal/applications/auth_client_credential/repository/db"
	db2 "hokusai/internal/applications/auth_client_session/repository/db"
	service2 "hokusai/internal/applications/auth_client_session/service"
	"hokusai/internal/component/cache"
)

// Injectors from auth_injector.go:

func InitializedAuthService(dbClient *ent.Client, redis2 *redis.Client) *service.AuthServiceImpl {
	clientCredentialRepositoryImpl := db.NewClientCredentialRepository(dbClient)
	clientSessionRepositoryImpl := db2.NewClientSessionRepository(dbClient)
	cacheImpl := cache.NewCache(redis2)
	clientSessionServiceImpl := service2.NewClientSessionService(clientSessionRepositoryImpl, cacheImpl)
	bcryptHasher := passwordhasher.NewBcryptHasher()
	authServiceImpl := service.NewAuthService(clientCredentialRepositoryImpl, clientSessionServiceImpl, bcryptHasher)
	return authServiceImpl
}

// auth_injector.go:

var providerSetAuth = wire.NewSet(service.NewAuthService, wire.Bind(new(service.AuthService), new(*service.AuthServiceImpl)), db.NewClientCredentialRepository, wire.Bind(new(db.ClientCredentialRepository), new(*db.ClientCredentialRepositoryImpl)), passwordhasher.NewBcryptHasher, wire.Bind(new(passwordhasher.PasswordHasher), new(*passwordhasher.BcryptHasher)))
