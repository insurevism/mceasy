// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package auth

import (
	"github.com/go-redis/redis/v8"
	"github.com/google/wire"
	"mceasy/ent"
	"mceasy/internal/applications/auth/service"
	"mceasy/internal/applications/auth/utils/password_hasher"
	"mceasy/internal/applications/user/repository"
	service2 "mceasy/internal/applications/user/service"
	"mceasy/internal/component/cache"
	"mceasy/internal/component/transaction"
)

// Injectors from auth_injector.go:

func InitializedAuthService(dbClient *ent.Client, redis2 *redis.Client) *service.AuthServiceImpl {
	bcryptHasher := passwordhasher.NewBcryptHasher()
	userRepositoryImpl := repository.NewUserRepository(dbClient)
	trxImpl := transaction.NewTrx(dbClient)
	cacheImpl := cache.NewCache(redis2)
	userServiceImpl := service2.NewUserService(userRepositoryImpl, trxImpl, cacheImpl)
	authServiceImpl := service.NewAuthService(bcryptHasher, userServiceImpl)
	return authServiceImpl
}

// auth_injector.go:

var providerSetAuth = wire.NewSet(service.NewAuthService, wire.Bind(new(service.AuthService), new(*service.AuthServiceImpl)), service2.NewUserService, wire.Bind(new(service2.UserService), new(*service2.UserServiceImpl)), repository.NewUserRepository, wire.Bind(new(repository.UserRepository), new(*repository.UserRepositoryImpl)), transaction.NewTrx, wire.Bind(new(transaction.Trx), new(*transaction.TrxImpl)), cache.NewCache, wire.Bind(new(cache.Cache), new(*cache.CacheImpl)), passwordhasher.NewBcryptHasher, wire.Bind(new(passwordhasher.PasswordHasher), new(*passwordhasher.BcryptHasher)))
