// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package dashboard

import (
	"github.com/go-redis/redis/v8"
	"github.com/google/wire"
	"mceasy/ent"
	"mceasy/internal/applications/dashboard/controller"
	"mceasy/internal/applications/dashboard/repository"
	"mceasy/internal/applications/dashboard/service"
	"mceasy/internal/component/cache"
)

// Injectors from dashboard_injector.go:

func InitializedDashboardService(dbClient *ent.Client, redisClient *redis.Client) service.DashboardService {
	dashboardRepositoryImpl := repository.NewDashboardRepository(dbClient)
	cacheImpl := cache.NewCache(redisClient)
	dashboardServiceImpl := service.NewDashboardService(dashboardRepositoryImpl, cacheImpl)
	return dashboardServiceImpl
}

func InitializedDashboardController(dbClient *ent.Client, redisClient *redis.Client) *controller.DashboardController {
	dashboardRepositoryImpl := repository.NewDashboardRepository(dbClient)
	cacheImpl := cache.NewCache(redisClient)
	dashboardServiceImpl := service.NewDashboardService(dashboardRepositoryImpl, cacheImpl)
	dashboardController := controller.NewDashboardController(dashboardServiceImpl)
	return dashboardController
}

// dashboard_injector.go:

var providerDashboard = wire.NewSet(repository.NewDashboardRepository, service.NewDashboardService, cache.NewCache, wire.Bind(new(repository.DashboardRepository), new(*repository.DashboardRepositoryImpl)), wire.Bind(new(cache.Cache), new(*cache.CacheImpl)), wire.Bind(new(service.DashboardService), new(*service.DashboardServiceImpl)))
